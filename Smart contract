// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ZENToken {
    string public name = "ZenChain Token";
    string public symbol = "ZENT";
    uint8 public decimals = 18;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor(uint256 initialSupply) {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address to, uint256 value) external returns (bool) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");
        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }

    function approve(address spender, uint256 value) external returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) external returns (bool) {
        require(balanceOf[from] >= value, "Insufficient balance");
        require(allowance[from][msg.sender] >= value, "Insufficient allowance");
        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;
        emit Transfer(from, to, value);
        return true;
    }
}
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./ZENToken.sol";

contract SwapContract {
    ZENToken public zenToken;
    address public owner;
    mapping(address => uint256) public swapHistory;

    event Swap(address indexed user, uint256 zenAmount, uint256 ethAmount);

    constructor(address _zenToken) {
        zenToken = ZENToken(_zenToken);
        owner = msg.sender;
    }

    function swapTokens(uint256 zenAmount) external {
        require(zenToken.balanceOf(msg.sender) >= zenAmount, "Insufficient ZENT balance");
        require(zenToken.transferFrom(msg.sender, address(this), zenAmount), "Transfer failed");

        // Placeholder: Cross-chain swap logic (in production, integrate with ZenChain's CCIM)
        uint256 ethAmount = zenAmount; // 1:1 swap for demo purposes
        swapHistory[msg.sender] += zenAmount;
        emit Swap(msg.sender, zenAmount, ethAmount);
    }

    function getSwapHistory(address user) external view returns (uint256) {
        return swapHistory[user];
    }
}
